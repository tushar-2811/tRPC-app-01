function map(project) {
    return (originalObserver)=>{
        return {
            subscribe (observer) {
                let index = 0;
                const subscription = originalObserver.subscribe({
                    next (value) {
                        observer.next?.(project(value, index++));
                    },
                    error (error) {
                        observer.error?.(error);
                    },
                    complete () {
                        observer.complete?.();
                    }
                });
                return subscription;
            }
        };
    };
}
function share(_opts) {
    return (originalObserver)=>{
        let refCount = 0;
        let subscription = null;
        const observers = [];
        function startIfNeeded() {
            if (subscription) {
                return;
            }
            subscription = originalObserver.subscribe({
                next (value) {
                    for (const observer of observers){
                        observer.next?.(value);
                    }
                },
                error (error) {
                    for (const observer of observers){
                        observer.error?.(error);
                    }
                },
                complete () {
                    for (const observer of observers){
                        observer.complete?.();
                    }
                }
            });
        }
        function resetIfNeeded() {
            // "resetOnRefCountZero"
            if (refCount === 0 && subscription) {
                const _sub = subscription;
                subscription = null;
                _sub.unsubscribe();
            }
        }
        return {
            subscribe (observer) {
                refCount++;
                observers.push(observer);
                startIfNeeded();
                return {
                    unsubscribe () {
                        refCount--;
                        resetIfNeeded();
                        const index = observers.findIndex((v)=>v === observer);
                        if (index > -1) {
                            observers.splice(index, 1);
                        }
                    }
                };
            }
        };
    };
}
function tap(observer) {
    return (originalObserver)=>{
        return {
            subscribe (observer2) {
                return originalObserver.subscribe({
                    next (v) {
                        observer.next?.(v);
                        observer2.next?.(v);
                    },
                    error (v) {
                        observer.error?.(v);
                        observer2.error?.(v);
                    },
                    complete () {
                        observer.complete?.();
                        observer2.complete?.();
                    }
                });
            }
        };
    };
}

export { map, share, tap };
