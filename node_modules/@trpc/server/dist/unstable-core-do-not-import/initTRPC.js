'use strict';

var createProxy = require('./createProxy.js');
var formatter = require('./error/formatter.js');
var middleware = require('./middleware.js');
var procedureBuilder = require('./procedureBuilder.js');
var rootConfig = require('./rootConfig.js');
var router = require('./router.js');
var transformer = require('./transformer.js');

/**
 * TODO: This can be improved:
 * - We should be able to chain `.meta()`/`.context()` only once
 * - Simplify typings
 * - Doesn't need to be a class but it doesn't really hurt either
 */ class TRPCBuilder {
    /**
   * Add a context shape as a generic to the root object
   * @link https://trpc.io/docs/v11/server/context
   */ context() {
        return new TRPCBuilder();
    }
    /**
   * Add a meta shape as a generic to the root object
   * @link https://trpc.io/docs/v11/quickstart
   */ meta() {
        return new TRPCBuilder();
    }
    /**
   * Create the root object
   * @link https://trpc.io/docs/v11/server/routers#initialize-trpc
   */ create(options) {
        return createTRPCInner()(options);
    }
}
/**
 * Builder to initialize the tRPC root object - use this exactly once per backend
 * @link https://trpc.io/docs/v11/quickstart
 */ const initTRPC = new TRPCBuilder();
function createTRPCInner() {
    return function initTRPCInner(runtime) {
        const errorFormatter = runtime?.errorFormatter ?? formatter.defaultFormatter;
        const transformer$1 = transformer.getDataTransformer(runtime?.transformer ?? transformer.defaultTransformer);
        const config = {
            transformer: transformer$1,
            isDev: runtime?.isDev ?? // eslint-disable-next-line @typescript-eslint/dot-notation
            globalThis.process?.env?.['NODE_ENV'] !== 'production',
            allowOutsideOfServer: runtime?.allowOutsideOfServer ?? false,
            errorFormatter,
            isServer: runtime?.isServer ?? rootConfig.isServerDefault,
            /**
       * @internal
       */ $types: createProxy.createFlatProxy((key)=>{
                throw new Error(`Tried to access "$types.${key}" which is not available at runtime`);
            })
        };
        {
            // Server check
            const isServer = runtime?.isServer ?? rootConfig.isServerDefault;
            if (!isServer && runtime?.allowOutsideOfServer !== true) {
                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);
            }
        }
        return {
            /**
       * These are just types, they can't be used
       * @internal
       */ _config: config,
            /**
       * Builder object for creating procedures
       * @link https://trpc.io/docs/v11/server/procedures
       */ procedure: procedureBuilder.createBuilder({
                meta: runtime?.defaultMeta
            }),
            /**
       * Create reusable middlewares
       * @link https://trpc.io/docs/v11/server/middlewares
       */ middleware: middleware.createMiddlewareFactory(),
            /**
       * Create a router
       * @link https://trpc.io/docs/v11/server/routers
       */ router: router.createRouterFactory(config),
            /**
       * Merge Routers
       * @link https://trpc.io/docs/v11/server/merging-routers
       */ mergeRouters: router.mergeRouters,
            /**
       * Create a server-side caller for a router
       * @link https://trpc.io/docs/v11/server/server-side-calls
       */ createCallerFactory: router.createCallerFactory()
        };
    };
}

exports.initTRPC = initTRPC;
