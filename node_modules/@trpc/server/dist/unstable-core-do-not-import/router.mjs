import { createRecursiveProxy } from './createProxy.mjs';
import { defaultFormatter } from './error/formatter.mjs';
import { TRPCError } from './error/TRPCError.mjs';
import { defaultTransformer } from './transformer.mjs';
import { mergeWithoutOverrides, omitPrototype } from './utils.mjs';

function isRouter(procedureOrRouter) {
    return 'router' in procedureOrRouter._def;
}
const emptyRouter = {
    _ctx: null,
    _errorShape: null,
    _meta: null,
    queries: {},
    mutations: {},
    subscriptions: {},
    errorFormatter: defaultFormatter,
    transformer: defaultTransformer
};
/**
 * Reserved words that can't be used as router or procedure names
 */ const reservedWords = [
    /**
   * Then is a reserved word because otherwise we can't return a promise that returns a Proxy
   * since JS will think that `.then` is something that exists
   */ 'then'
];
/**
 * @internal
 */ function createRouterFactory(config) {
    return function createRouterInner(procedures) {
        const reservedWordsUsed = new Set(Object.keys(procedures).filter((v)=>reservedWords.includes(v)));
        if (reservedWordsUsed.size > 0) {
            throw new Error('Reserved words used in `router({})` call: ' + Array.from(reservedWordsUsed).join(', '));
        }
        const routerProcedures = omitPrototype({});
        function recursiveGetPaths(procedures, path = '') {
            for (const [key, procedureOrRouter] of Object.entries(procedures ?? {})){
                const newPath = `${path}${key}`;
                if (isRouter(procedureOrRouter)) {
                    recursiveGetPaths(procedureOrRouter._def.procedures, `${newPath}.`);
                    continue;
                }
                if (routerProcedures[newPath]) {
                    throw new Error(`Duplicate key: ${newPath}`);
                }
                routerProcedures[newPath] = procedureOrRouter;
            }
        }
        recursiveGetPaths(procedures);
        const _def = {
            _config: config,
            router: true,
            procedures: routerProcedures,
            ...emptyRouter,
            record: procedures
        };
        const router = {
            ...procedures,
            _def,
            createCaller (ctx) {
                const proxy = createRecursiveProxy(({ path , args  })=>{
                    const fullPath = path.join('.');
                    const procedure = _def.procedures[fullPath];
                    return procedure({
                        path: fullPath,
                        getRawInput: async ()=>args[0],
                        ctx,
                        type: procedure._def.type
                    });
                });
                return proxy;
            }
        };
        return router;
    };
}
function isProcedure(procedureOrRouter) {
    return !!procedureOrRouter._def.procedure;
}
/**
 * @internal
 */ function callProcedure(opts) {
    const { type , path  } = opts;
    const proc = opts.procedures[path];
    if (!proc || !isProcedure(proc) || proc._def.type !== type) {
        throw new TRPCError({
            code: 'NOT_FOUND',
            message: `No "${type}"-procedure on path "${path}"`
        });
    }
    return proc(opts);
}
function createCallerFactory() {
    return function createCallerInner(router) {
        const _def = router._def;
        return function createCaller(maybeContext) {
            const proxy = createRecursiveProxy(({ path , args  })=>{
                const fullPath = path.join('.');
                const procedure = _def.procedures[fullPath];
                const callProc = (ctx)=>procedure({
                        path: fullPath,
                        getRawInput: async ()=>args[0],
                        ctx,
                        type: procedure._def.type
                    });
                if (typeof maybeContext === 'function') {
                    const context = maybeContext();
                    if (context instanceof Promise) {
                        return context.then(callProc);
                    }
                    return callProc(context);
                }
                return callProc(maybeContext);
            });
            return proxy;
        };
    };
}
function mergeRouters(...routerList) {
    const record = mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));
    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{
        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== defaultFormatter) {
            if (currentErrorFormatter !== defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {
                throw new Error('You seem to have several error formatters');
            }
            return nextRouter._def._config.errorFormatter;
        }
        return currentErrorFormatter;
    }, defaultFormatter);
    const transformer = routerList.reduce((prev, current)=>{
        if (current._def._config.transformer && current._def._config.transformer !== defaultTransformer) {
            if (prev !== defaultTransformer && prev !== current._def._config.transformer) {
                throw new Error('You seem to have several transformers');
            }
            return current._def._config.transformer;
        }
        return prev;
    }, defaultTransformer);
    const router = createRouterFactory({
        errorFormatter,
        transformer,
        isDev: routerList.some((r)=>r._def._config.isDev),
        allowOutsideOfServer: routerList.some((r)=>r._def._config.allowOutsideOfServer),
        isServer: routerList.some((r)=>r._def._config.isServer),
        $types: routerList[0]?._def._config.$types
    })(record);
    return router;
}

export { callProcedure, createCallerFactory, createRouterFactory, mergeRouters };
